Github link: https://github.com/academind/django-practical-guide-course-code



step 1 : 55: setup the virtualenv and create project & app

    mkvirtualenv <projectname>
    python -m pip install Django or python3 -m pip install Django
    django-admin startproject <projectname>
    
get inside the project folder and create app
    python manage.py startapp <appname> or python3 mamage.py startapp <appname>
    python manage.py runserver 

now open the project folder in vscode


step2: 57: URLS and Views

create url.py inside app and define urlpatterns 
create functions inside view.py
assign views.<function> in the urls.py file
assign name for each url path in urls.py file 

register path in main project folder urls.py urlparttern path('', include('blog.urls'))   


step 3: 58: adding index.html , base.html templates and registring created app, asigning base_dir

3.1: create index template inside app folder 
3.2: create base templete globally which holde only the base skelton 
3.3: add block to title, body and to insert css file
3.4: create blocks based on base template
3.6: add blog to installed app to inform django that we have app name 'blog'in settings.py
3.7: add template folder to templates dirs, so that django knows that we have add template folder globaly in settings.py

so for we have the http://127.0.0.1:8000 page 

step 4: 59: adding css file and add link on the html files, also add staticfile_dir location at settings.py

4.1: create index.css file instide app static/blog location and add the css code
4.2: create app.css file in global location and add all common style in this file
4.3: create content inside the <block content> in index.html
step 4.4: add staticfile_dirs in settings.py to inform django that we have created static folder globaly in settings.py
step 4.5: link app.css in base.html file 
step 4.6: load static and link index.css file with its path in index.html

step 5: 58: adding image to static folder

step 5.1: 59: add image folder under static/blog and add some images, using static add the image path and refresh the page
step 6: 60: with includes all post page and css file for styling,

step 7: 61: adding url tag for base.html and post.html
step 7.1: add url tag for shiv blog by specifing name from app url.py
step 7.2: add url tag for all post by specifing name from app url.py
step 7.3: add url tag for specific post by specifing name from url.py. 
step 7.3: add url tag for specific post by specifing name from url.py. 'mountain' is hardcoded for testing, it wont work because we didnt specify the function yet 

step 8: 62: adding detail post page and style
step 8.1: add detail_post html file, adding image and some hardcodes are give but it will be change to dynamic in upcoming steps
step 8.2: copy css file from given resource, after add this css link to detail_post html file, in order to call the styles
step 8.3: add return for detail_post function, also add slug as a argument inorder to view the page

step 9: 63: adding dummy data

step10: 64: Special Template Features & Syntax
step 10.1: add recent 3 post on the home page, from dummy data, also images are added
step 10.2: add 'for' loop to create the multiple post, the number of post is specified from views.py slicing
step 10.3: excerpt, title, image, author and url slug is added, here we have used ''.'' notations and 'add' tag

step 11: 65: working on detail post 
step 11.1: for all post page function is defind in views.py, to collect all post we use dict in render return
step 11.2: in the all-post html generate all the post using 'include' in 'for loop'. now all post page have all the avaliable post
step 11.3: In views.py, detail_post function use python next() function to return next item using for and if statements and return a key value
step 11.4: In post.html, using the same key, change title, image, author, posted date and content dynamicly generated

step 12: 66: adding 404 page
step 12.1: add 404.html file in main templete folder and add extends, title and content of the page for now, we are connecting to the website now.

create 3 models Post, Author, Tag with its field.  
step 13: 119: add Post Model
step 13.1: add models Post in models.py file, with title, excerpt, image_name, date, slug, content.

step 14: 120: Author model, one to many
Step 14.1: Add Author model in models.py with fields first_name, last_name, email
step 14.2: add author field in Post as models.foreignkey, it is used to mention (many to one relationship) field.

step 15: 121: Tag model, many to many
step 15.1: add Tag model in models.py with field caption.
step 15.2: add tags field to Post as models.manytomanyfield.

step 16: 122: register the models to admin.py
step 16.1: register all three models in admin.py file to access the models on admin panel.
step 16.2: also add admin panel display class and add to register.
step 16.3: makemigrations and migrate the changes.

create supersuper using 'python3 manage.py createsuperuser'

step 17: 124: add date through Admin panel

step 18: 125: configure slug field
step 18.1: To create slug automaticly, add 'prepopulated_fields = {'slug': ('title',)}' field in admin.py 

step 19: 126, 127: Fetch data from DB, display data
step 19.1: in view.py file - home page use objects.all and order by decending and slice to get new post
step 19.2: in view.py file - all post page, same as above use all() to display all post. 
step 19.3: in view.py file - detail post page, use get object 404 to display the single post.
step 19.4: on post.html and detail_post.html change the name 'image' to image_name'
step 19.5: remove all unused function and date from view.py file

step 20: 128: Add tag details to single post
step 20.1: In views.py, in order to generate the multiple selected collect all the tags in one key - 'post_detail.tags.all()'.
step 20.2: In detail_post.html file, generate the tags using for loop.
step 20.3: add some styling in detail_post.css file
step 20.4: convert author name to href by clicking it takes us to the author email in detail_post.html. also add some style in css file 

Section 14:
In this section we are working on the blog website uploding image, adding comments, add read later feature with sessions. 

step 21: 186: Adding image field to model and add MEDIA_ROOT, MEDIA_URL
step 21.1: In models.py, change the image field to model.imagefield
step 21.2: Add Upload folder in the root to save the images
step 21.3: In settings.py, add MEDIA_ROOT = BASE_DIR /'Upload' and add MEDIA_URL = '/files/' - it can be anyname
setp 21.4: In admin.py, remove image_name from list_diaplay.
now image field is add but still vriable is not yet diclared.

step: 22: 187: serving the uploded image
step 22.1: In main project urls.py, add static(settings.MEDIA_URL, document_root = settings.MEDIA_ROOT) to urlpattern.
step 22.2: In detail_post.html, remove static and add post_detail.image.url to get the post_detail.image.url
step 22.3: In post.html, remove static and add post.image.url

Step 23: 188: convert all functions to class in views.py
step 23.1: In views.py, convert all function to class based view
step 23.2: In urls.py, change the path according to class dased views

step 24: 189: create comment model in models.py
step 24.1: add new comment class in the model and add fields as user_name, email, comment post as models.foreignkey
step 24.2: makemigrations and migrate to create table in database
